name: PR

on:
  workflow_call:
    inputs:
      APP_FOLDER:
        required: true
        description: 'Folder name of the service under application folder'
        type: string
      SERVICE_NAME:
        required: true
        description: 'Name of the service for container image. Format: <owner>/tcc-group-5-<SERVICE_NAME>:<tag>'
        type: string
      APP_MANIFEST_FOLDER:
        required: true
        description: 'Folder name of the service under manifest/<env> folder'
        type: string
      METADATA:
        required: true
        type: string

env:
  DEPLOYMENT_FILE: deployment.yaml

jobs:
  image-tag:
    name: Image Tag
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./application/${{ inputs.APP_FOLDER }}
    outputs:
      NEW_TAG: ${{ steps.retag.outputs.NEW_TAG }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          #fetch-depth: 0
          ref: develop

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          #registry: ${{ env.REGISTRY }}
          #username: ${{ github.actor }}
          #password: ${{ secrets.GITHUB_TOKEN }}

          username: ${{ vars.APP_IMAGE }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Pull Image
        shell: bash
        working-directory: ./manifest/dev
        run: |
          export IMAGE_TAG=$(yq e '.spec.template.spec.containers[0].image' ${{ inputs.APP_MANIFEST_FOLDER }}/deployment.yaml | cut -d ':' -f 2)
          echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV
          echo "image_tag: $IMAGE_TAG"

          export IMAGE_NAME=${{ vars.APP_IMAGE }}/tcc-group-5-${{ inputs.SERVICE_NAME }}
          echo "IMAGE_NAME=$IMAGE_NAME" >> $GITHUB_ENV
          echo "image_name: $IMAGE_NAME"

          docker pull $IMAGE_NAME:$IMAGE_TAG
          echo "List Images"
          docker images | ${{ inputs.SERVICE_NAME }}

      - name: Retag Image
        id: retag
        run: |
          docker images | ${{ inputs.SERVICE_NAME }}
          echo "Image tag: $IMAGE_TAG"
          export NEW_TAG=$(jq -r '.version' package.json)
          echo "New tag: $NEW_TAG"
          echo "NEW_TAG=$NEW_TAG" >> $GITHUB_OUTPUT

          docker tag $IMAGE_NAME:$IMAGE_TAG $IMAGE_NAME:v$NEW_TAG
          docker push $IMAGE_NAME:v$NEW_TAG

  deployment-image:
    name: Deployment Image
    runs-on: ubuntu-latest
    #permissions:
    #  contents: 'read'
    #  id-token: 'write'
    needs: image-tag
    defaults:
      run:
        working-directory: ./manifest/prod
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: main
          token: ${{ secrets.GH_PAT }}

      - name: Update Deployment
        env:
          NEW_TAG: ${{ needs.image-tag.outputs.NEW_TAG }}
        run: |
          cd ${{ inputs.APP_MANIFEST_FOLDER }}
          echo "${{ needs.image-tag.outputs.NEW_TAG }}"
          export APP_IMAGE=${{ needs.image-tag.outputs.NEW_TAG }}
          yq -i '.spec.template.spec.containers[0].image = strenv(APP_IMAGE)' $DEPLOYMENT_FILE

          export UPDATED_IMAGE=$(yq '.spec.template.spec.containers[0].image' $DEPLOYMENT_FILE)
          echo "Updated image: $UPDATED_IMAGE"

      - name: Commit and Push
        run: |
          cd ${{ inputs.APP_MANIFEST_FOLDER }}
          git config --global user.email "support@dependabot.com"
          git config --global user.name "dependabot[bot]"
          git add $DEPLOYMENT_FILE
          git commit -m "bot: update ${{ inputs.SERVICE_NAME }} image in deployment.yaml"
          git push origin main